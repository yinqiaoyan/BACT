% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/BACT.R
\name{BACT}
\alias{BACT}
\title{BACT: nonparametric Bayesian cell typing for single-cell spatial transcriptomics data}
\usage{
BACT(
  gene_data_pc,
  coord,
  platform = c("ST", "Visium", "sc"),
  num_init = 5,
  num_nei = 6,
  d1 = 3,
  R1_elem = 0.5,
  a_eta = 0,
  b_eta = 1.5,
  IGkappa = 2,
  IGtau = 10,
  dpAlpha = 1,
  a_beta = 1,
  tau_beta = 1,
  tau0 = 0.01,
  tau1 = 0.05,
  M0 = 50,
  numOfMCMC = 4000,
  burnIn = 2000,
  Is_beta_zero = FALSE,
  Is_warm_start = FALSE,
  Is_kmeans_use_mean_sd = FALSE,
  Is_print = TRUE,
  print_gap = 10,
  Is_random_seed = TRUE,
  random_seed = 30
)
}
\arguments{
\item{gene_data_pc}{n.PCs*n preprocessed gene expression matrix. Obtained by normalizing ST raw count matrix, taking logarithm, and conducting PCA.}

\item{coord}{Coordinates dataframe (2 columns). 1st column: first dimension coordinate. 2nd column: second dimension coordinate.}

\item{platform}{Spatial sequencing platform. Used to determine neighborhood structure (ST = square, Visium = hex, sc = single-cell resolved ST).}

\item{num_init}{Initial region number. Default is 5.}

\item{num_nei}{Number of neighbors. Required if platform is "sc". Default is 6.}

\item{d1}{Degree of freedom for the inverse Wishart prior of \eqn{\Lambda_k}. Default is 3.}

\item{R1_elem}{Diagonal element of matrix R1. Default is 0.5.}

\item{a_eta}{Mean of the normal prior for \eqn{\eta}. Default is 0.}

\item{b_eta}{Standard deviation of the normal prior for \eqn{\eta}. Default is 1.5.}

\item{IGkappa}{Shape parameter of the inverse gamma prior for \eqn{\sigma_g}. Default is 2.}

\item{IGtau}{Scale parameter of the inverse gamma prior for \eqn{\sigma_g}. Default is 10.}

\item{dpAlpha}{Hyperparameter of the GEM distribution for the stick-breaking prior of \eqn{\pi_k}. That is, \eqn{\xi_i} are drawn from Be(1, dpAlpha). Default is 1.}

\item{a_beta}{Mean of the normal distribution before truncation for the spatial interaction parameter \eqn{\beta}. Default is 1.}

\item{tau_beta}{Standard deviation of the normal distribution before truncation for \eqn{\beta}. Default is 1.}

\item{tau0}{Standard deviation of the normal distribution before truncation for the proposal distribution of \eqn{\xi_k^*} when k < M0. Default is 0.01.}

\item{tau1}{Standard deviation of the normal distribution before truncation for the proposal distribution of \eqn{\beta}. Default is 0.05.}

\item{M0}{A relatively large fixed positive integer. Used to determine proposal distribution form of \eqn{\xi_k^*}. Default is 50.}

\item{numOfMCMC}{Number of MCMC iterations. Default is 4000.}

\item{burnIn}{Number of iterations in burn-in. After burnIn the posterior samples are used and saved to estimate the unknown parameters. Default is 2000.}

\item{Is_beta_zero}{Logical; if TRUE, \eqn{\beta} is fixed at zero. Default is FALSE.}

\item{Is_warm_start}{Logical; if TRUE, warm start steps by KMeans are used to initialize C. Default is FALSE.}

\item{Is_kmeans_use_mean_sd}{Logical; if TRUE, results by KMeans are used to initialize mean and standard deviation of each cluster. Required if Is_warm_start is TRUE. Default is FALSE.}

\item{Is_print}{Logical; if TRUE, iteration time information of each update step are printed. Default is TRUE.}

\item{print_gap}{Length of iteration interval to print the number of iterations. Default is 10.}

\item{Is_random_seed}{Logical; if TRUE, a random seed is used for reproducibility. Default is TRUE.}

\item{random_seed}{Random seed. Required if Is_random_seed is TRUE. Default is 30.}
}
\value{
BINRES returns an R list including the following information.
\item{clIds_mcmc}{matrix, the posterior samples of integrative region indicators for each spot or cell. Rows: MCMC samples. Columns: n cells.}
\item{eta_k_mcmc}{list, each element contains the posterior sample of \eqn{\eta_k} for all clusters in each MCMC iteration.}
\item{sigma_g_mcmc}{matrix, the posterior samples of \eqn{\sigma_g} for each gene. Rows: MCMC samples. Columns: PCs.}
\item{pottsBeta_mcmc}{vector, the posterior samples of spatial interaction parameter \eqn{\beta}.}
\item{dpXi_mcmc}{list, each element contains the posterior sample of \eqn{\xi_k} in each MCMC iteration.}
\item{exeTime}{Total execution time of running the code.}
}
\description{
The function BACT is the model training function in this paper in which PCA
    is used to reduce the dimensionality for the normalized gene expressions
    in logarithmic scale. Normal priors are assigned to top principal
    components.
}
\examples{
library(BACT)
library(aricode)
library(ggplot2)
# Import example data
# (1) coord: Spatial coordinates
# (2) gene_data_pc: processed gene expression data (after log-normalization and PCA)
# (3) truth_labels: Cell type annotation of all cells
data(example_data)
# Dimension of spatial coordinates
dim(coord)
# Dimension of gene expression data
dim(gene_data_pc)
# Auxiliary functions
getmode <- function(v) {
  uniqv <- unique(v)
  res <- uniqv[which.max(tabulate(match(v, uniqv)))]
  return(res)
}
# --- run BACT ---
# Total execution time is about 1.5 minutes
# on a MacBook Pro with Intel Core i5 CPU at 2GHz and 16GB of RAM.
res_list = BACT(gene_data_pc = gene_data_pc, coord = coord, platform = "sc",
                num_init = 7, num_nei = 6,
                d1=3, R1_elem=0.5,
                a_eta=0, b_eta=1.5, IGkappa=2, IGtau=10, dpAlpha=1,
                a_beta=1, tau_beta=1, tau0=0.01, tau1=0.05, M0=50,
                numOfMCMC=600, burnIn=300,
                Is_beta_zero=FALSE, Is_warm_start=TRUE,
                Is_kmeans_use_mean_sd=TRUE,
                Is_print=TRUE, print_gap=100,
                Is_random_seed=TRUE, random_seed=99)
# Execution time
res_list$exeTime
# Posterior mode of consensus clustering C
clIds_mode = apply(res_list$clIds_mcmc, 2, getmode)
# Compared with true labels
table(clIds_mode, truth_labels)
cat("ARI value:", ARI(clIds_mode, truth_labels))

## --- Visualization for BACT --- ##
tmpc = clIds_mode
tmpc2 = tmpc
tmpc_vec = sort(unique(tmpc))
tmpc2_vec = c(1,4,7,2,5,3,11,8,6,10,9,13)
for (ii in 1:length(unique(tmpc))) {
  tmpc2[tmpc == tmpc_vec[ii]] = tmpc2_vec[[ii]]
}
tmpc = tmpc2
plot_color=c("#ff6466", "#ffb610", "#c599f3", "#52c084", "#7b92ce", "#d2d1d0",
             "#6b1499", "#138320", "#3185eb", "#9d766e", "#b2c7e5", "#a8dc93")
par(ask = FALSE)

ppdata = data.frame(x = coord[,1], y = coord[,2], c = tmpc)
pp = ggplot(data = ppdata, aes(x=x, y=y)) +
  geom_point(aes(color=factor(c)), size = 6) +
  theme(panel.background = element_blank(),
        axis.title.x=element_blank(),
        axis.text.x=element_blank(),
        axis.ticks.x=element_blank(),
        axis.title.y=element_blank(),
        axis.text.y=element_blank(),
        axis.ticks.y=element_blank(),
        legend.text = element_text(size = 35),
        legend.title = element_blank(),
        legend.key.size = unit(2, 'cm')) +
  scale_color_manual(values=plot_color,
                     labels = paste0("C", 1:12)) +
  guides(color = guide_legend(override.aes = list(size = 12), ncol = 2))

ggsave("./starmap_bact.png", pp, width = 18, height = 10, dpi = 100)

## --- Visualization for Annotation --- ##
tmpc = truth_labels
plot_color=c("#ff6466", "#ffb610", "#c599f3", "#52c084", "#7b92ce",
             "#d2d1d0", "#6b1499", "#138320", "#3185eb", "#9d766e",
             "#b2c7e5", "#a8dc93", "#f29d99", "#FFE0C1", "#EFCDF7","#d57fbe")
ppdata = data.frame(x = coord[,1], y = coord[,2], c = tmpc)
pp = ggplot(data = ppdata, aes(x=x, y=y)) +
  geom_point(aes(color=factor(c)), size = 6) +
  theme(panel.background = element_blank(),
        axis.title.x=element_blank(),
        axis.text.x=element_blank(),
        axis.ticks.x=element_blank(),
        axis.title.y=element_blank(),
        axis.text.y=element_blank(),
        axis.ticks.y=element_blank(),
        legend.text = element_text(size = 35),
        legend.title = element_blank(),
        legend.key.size = unit(2, 'cm')) +
  scale_color_manual(values=plot_color) +
  guides(color = guide_legend(override.aes = list(size = 12), ncol = 2))

ggsave("./starmap_cell_annotation.png", pp, width = 20, height = 10, dpi = 100)

}
